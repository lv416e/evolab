name: ci-min

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      full:
        description: "Run full test suite"
        required: false
        type: boolean
        default: false

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.filter.outputs.code_changed }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            code_changed:
              - 'src/**'
              - 'include/**'
              - 'apps/**'
              - 'tests/**'
              - '**/CMakeLists.txt'
              - '**/*.cmake'

  build-test:
    needs: path-filter
    if: needs.path-filter.outputs.run_ci == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        numa: [off, on]
        exclude:
          - os: windows-latest
            numa: on
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache build-essential cmake

          # Verify compiler version (GCC 13+ required for std::format support)
          gcc_version=$(gcc -dumpversion | cut -d. -f1)
          echo "GCC version: $(gcc --version | head -1)"
          if [ "$gcc_version" -lt 13 ]; then
            echo "::error::GCC 13+ required for C++23 std::format support (found GCC $gcc_version)"
            exit 1
          fi

      - name: Install NUMA deps (Linux, when numa=on)
        if: runner.os == 'Linux' && matrix.numa == 'on'
        run: |
          sudo apt-get install -y libnuma1 libnuma-dev numactl

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Cache ccache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Init ccache (Linux)
        if: runner.os == 'Linux'
        run: |
          ccache --zero-stats || true
          ccache --max-size=500M || true

      - name: Configure (Linux)
        if: runner.os == 'Linux'
        env:
          NUMA: ${{ matrix.numa }}
        run: |
          EXTRA_FLAGS="-DEVOLAB_WITH_NUMA=$([[ "$NUMA" == "on" ]] && echo ON || echo OFF)"
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
            $EXTRA_FLAGS

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -A x64 -DEVOLAB_WITH_NUMA=OFF

      - name: Build (Linux)
        if: runner.os == 'Linux'
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_NOHASHDIR: "true"
        run: |
          cmake --build build --parallel
          ccache --show-stats || true

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build build --config Release --parallel

      - name: Test (Linux, smoke by default)
        if: runner.os == 'Linux'
        env:
          NUMA: ${{ matrix.numa }}
          FULL: ${{ github.event.inputs.full || 'false' }}
        run: |
          CORES=$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu || echo 2)
          EXCLUDE=""
          if [[ "$NUMA" != "on" ]]; then EXCLUDE="-E numa"; fi

          # Print diagnostic info
          echo "::group::Test Configuration"
          echo "Cores available: $CORES"
          echo "NUMA enabled: $NUMA"
          echo "Full test suite: $FULL"
          echo "Exclude pattern: $EXCLUDE"
          echo "::endgroup::"

          # List available tests for diagnostics
          echo "::group::Available Tests"
          ctest --test-dir build --show-only=json-v1 $EXCLUDE | jq -r '.tests[] | "\(.name): \(.properties[] | select(.name=="LABELS") | .value // "no-label")"' 2>/dev/null || ctest --test-dir build --show-only $EXCLUDE
          echo "::endgroup::"

          if [[ "$FULL" == "true" ]]; then
            echo "::group::Running Full Test Suite"
            ctest --test-dir build --output-on-failure -j "$CORES" --timeout 300 $EXCLUDE
            echo "::endgroup::"
          else
            echo "::group::Running Smoke Tests"
            ctest --test-dir build --output-on-failure -j "$CORES" --timeout 120 -L smoke $EXCLUDE
            echo "::endgroup::"
          fi

      - name: Test (Windows, smoke by default)
        if: runner.os == 'Windows'
        run: |
          $cores = [Environment]::ProcessorCount
          $full = "${{ github.event.inputs.full || 'false' }}"

          # Print diagnostic info
          Write-Host "::group::Test Configuration"
          Write-Host "Cores available: $cores"
          Write-Host "NUMA enabled: off (Windows)"
          Write-Host "Full test suite: $full"
          Write-Host "Exclude pattern: -E numa"
          Write-Host "::endgroup::"

          # List available tests for diagnostics
          Write-Host "::group::Available Tests"
          ctest --test-dir build -C Release --show-only -E numa
          Write-Host "::endgroup::"

          if ($full -eq "true") {
            Write-Host "::group::Running Full Test Suite"
            ctest --test-dir build -C Release --output-on-failure -j $cores --timeout 300 -E numa
            Write-Host "::endgroup::"
          } else {
            Write-Host "::group::Running Smoke Tests"
            ctest --test-dir build -C Release --output-on-failure -j $cores --timeout 120 -L smoke -E numa
            Write-Host "::endgroup::"
          }
        shell: pwsh

      - name: Upload failing logs (only on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs-${{ matrix.os }}-numa-${{ matrix.numa }}
          path: |
            build/Testing/Temporary/LastTest.log
            build/Testing/Temporary/LastTestsFailed.log
          if-no-files-found: ignore

      - name: Upload compilation database (on failure, Linux only)
        if: failure() && runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: compile-commands-${{ matrix.numa }}
          path: build/compile_commands.json
          if-no-files-found: ignore
