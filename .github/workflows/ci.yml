name: ci-min

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      full:
        description: "Run full test suite"
        required: false
        type: boolean
        default: false

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  path-filter:
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.filter.outputs.code_changed }}
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: |
            code_changed:
              - 'src/**'
              - 'include/**'
              - 'apps/**'
              - 'tests/**'
              - '**/CMakeLists.txt'
              - '**/*.cmake'

  build-test:
    needs: path-filter
    if: needs.path-filter.outputs.run_ci == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Install toolchain (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache build-essential cmake

      - name: Setup MSVC (Windows)
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2

      - name: Cache ccache (Linux)
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Configure (Linux)
        if: runner.os == 'Linux'
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Configure (Windows)
        if: runner.os == 'Windows'
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -A x64

      - name: Build (Linux)
        if: runner.os == 'Linux'
        run: cmake --build build --parallel

      - name: Build (Windows)
        if: runner.os == 'Windows'
        run: cmake --build build --config Release --parallel

      - name: Test (Linux, smoke by default)
        if: runner.os == 'Linux'
        run: |
          CORES=$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu || echo 2)
          if [[ "${{ github.event.inputs.full || 'false' }}" == "true" ]]; then
            ctest --test-dir build --output-on-failure -j "$CORES" --timeout 300
          else
            ctest --test-dir build --output-on-failure -j "$CORES" --timeout 120 -L smoke
          fi

      - name: Test (Windows, smoke by default)
        if: runner.os == 'Windows'
        run: |
          $cores = [Environment]::ProcessorCount
          if ("${{ github.event.inputs.full }}" -eq "true") {
            ctest --test-dir build -C Release --output-on-failure -j $cores --timeout 300
          } else {
            ctest --test-dir build -C Release --output-on-failure -j $cores --timeout 120 -L smoke
          }
        shell: pwsh

      - name: Upload failing logs (only on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ctest-logs
          path: build/Testing/Temporary/LastTest.log
          if-no-files-found: ignore
