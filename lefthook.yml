# EvoLab Git Hooks Configuration with Lefthook
# C++23 development with justfile integration

# Pre-commit hooks - run before each commit
pre-commit:
  piped: true
  commands:
    format:
      priority: 1
      glob: "*.{cpp,hpp,cc,cxx,h}"
      run: just format-staged {staged_files}
      stage_fixed: true
      fail_text: "Code formatting failed. Files have been auto-formatted, please stage and commit again."

    check-format:
      priority: 2
      glob: "*.{cpp,hpp,cc,cxx,h}"
      run: just check-format-staged {staged_files}
      fail_text: "Code formatting check failed. Run 'just format' to fix."

    build-check:
      # Use default preset for pre-commit to ensure fast feedback during development
      run: PRESET=${PRESET:-default} just build
      fail_text: "Build failed! Please fix compilation errors."

    lint:
      glob: "*.{hpp,h}"
      # Use default preset for linting - faster than release build for development workflow
      run: just lint-staged ${PRESET:-default} {staged_files}
      fail_text: "Static analysis found issues."

pre-push:
  parallel: true
  commands:
    changed-check:
      run: |
        if ! git diff --name-only @{u}..HEAD | grep -Eq '^(src|include|apps|tests)/.*\.(c|cc|cpp|cxx|h|hpp)$'; then
          echo "No code changes detected. Skipping build & tests."
          exit 0
        fi

    build:
      # Use release preset for pre-push to catch optimization-related issues before sharing
      run: PRESET=${PRESET:-release} just build
      fail_text: "Pre-push build failed! Fix compilation errors before pushing."

    test:
      # Use release preset for comprehensive testing with optimizations enabled
      run: PRESET=${PRESET:-release} just test
      fail_text: "Tests failed! Fix failing tests before pushing."

# Skip hooks for specific scenarios
skip_output:
  - meta
  - execution

# Colors for output
colors: true
