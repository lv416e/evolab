# EvoLab Git Hooks Configuration with Lefthook
# Fast, parallel git hooks for C++23 development

# Pre-commit hooks - run before each commit
pre-commit:
  parallel: true
  commands:
    format:
      glob: "*.{cpp,hpp,cc,cxx,h}"
      run: clang-format -i --style=file {staged_files}
      stage_fixed: true
      fail_text: "Code formatting failed. Files have been auto-formatted, please stage and commit again."

    build-check:
      run: cmake --build build --parallel 4 --config Release 2>/dev/null || (echo "Build failed! Fix compilation errors before committing." && exit 1)
      fail_text: "Build failed! Please fix compilation errors."

    lint:
      glob: "*.{hpp,h}"
      run: |
        if [ -f build/compile_commands.json ]; then
          find {staged_files} -name "*.hpp" 2>/dev/null | head -10 | xargs -r clang-tidy --config-file=.clang-tidy -p build --quiet || true
        else
          echo "⚠️  No compilation database found. Run: cmake -B build -S . -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
        fi
      fail_text: "Static analysis found issues (non-blocking)."

pre-push:
  parallel: true
  commands:
    changed-check:
      run: |
        if ! git diff --name-only --cached | grep -Eq '^(src|include|apps|tests)/.*\.(c|cc|cpp|cxx|h|hpp)$'; then
          echo "No code changes. Skipping build & tests."
          exit 0
        fi

    cmake-configure:
      run: |
        if [ ! -d build ]; then
          cmake -S . -B build -G Ninja \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
        fi

    build:
      run: cmake --build build --parallel

    test:
      run: |
        CORES=$(getconf _NPROCESSORS_ONLN 2>/dev/null || sysctl -n hw.ncpu)
        ctest --test-dir build --output-on-failure --stop-on-failure -j "${CORES:-4}" --timeout 120 -L smoke

# Skip hooks for specific scenarios
skip_output:
  - meta
  - execution

# Colors for output
colors: true