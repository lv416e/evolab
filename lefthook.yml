pre-commit:
  parallel: true
  commands:
    format:
      run: |
        FILES=$(printf '%s\0' {staged_files} \
          | xargs -0 -I{} sh -c 'test -f "{}" && printf "%s\0" "{}"' \
          | grep -E -z '\.(c|cc|cpp|cxx|h|hpp)$' || true)
        if command -v git-clang-format >/dev/null 2>&1; then
          git clang-format --style=file --staged || true
        fi
        printf '%s' "$FILES" | xargs -0 -r clang-format -i --style=file
      stage_fixed: true
      fail_text: "clang-format has been applied. Please stage the changes and commit again."

    sanity:
      run: |
        if [ ! -f build/compile_commands.json ]; then
          echo "⚠️  No compile_commands.json. Hint: cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"
          exit 0
        fi
        CHANGED=$(printf '%s\0' {staged_files} \
          | xargs -0 -I{} sh -c 'test -f "{}" && printf "%s\n" "{}"' \
          | grep -E '\.(cc|cpp|cxx)$' || true)
        if [ -n "$CHANGED" ]; then
          echo "$CHANGED" | xargs -r -n 1 clang-tidy -p build --quiet || true
        fi
      fail_text: "clang-tidy has suggestions (non-blocking)."

pre-push:
  parallel: true
  commands:
    cmake-configure:
      run: |
        if [ ! -d build ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        fi

    build:
      run: cmake --build build --parallel
      fail_text: "Build failed. Please fix the errors."

    test:
      run: ctest --test-dir build --output-on-failure --timeout 300
      fail_text: "Tests failed. Please fix the errors."

skip_output:
  - meta
  - execution

colors: true